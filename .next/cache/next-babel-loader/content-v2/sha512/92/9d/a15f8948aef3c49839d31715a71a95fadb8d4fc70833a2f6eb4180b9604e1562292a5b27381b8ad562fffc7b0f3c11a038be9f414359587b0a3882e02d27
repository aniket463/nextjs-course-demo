{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\aniket\\\\Desktop\\\\REACT\\\\Nextjs_project\\\\nextjs-course\\\\pages\\\\index.jsx\";\nimport { MongoClient } from \"mongodb\"; // import { useEffect, useState } from \"react\";\n\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport Head from \"next/head\";\nimport { Fragment } from \"react\"; // const DUMMY_MEETUPS = [\n//   {\n//     id: \"m1\",\n//     title: \"A first meetup\",\n//     image: \"https://picsum.photos/seed/picsum/200/300\",\n//     address: \"Some address, kolkata\",\n//     description: \"This is first meetups\",\n//   },\n//   {\n//     id: \"m2\",\n//     title: \"A second meetup\",\n//     image: \"https://picsum.photos/id/870/200/300?grayscale&blur=2\",\n//     address: \"Some address, kolkata\",\n//     description: \"This is second meetups\",\n//   },\n//   {\n//     id: \"m3\",\n//     title: \"A third meetup\",\n//     image: \"https://picsum.photos/200/300/?blur\",\n//     address: \"Some address, Goa\",\n//     description: \"This is third meetups\",\n//   },\n// ];\n//Pre-rendering\n//1.static site generation\n//2.server side generation\n\nfunction HomePage(props) {\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\n  // useEffect(() => {\n  //   //send http request and fetch the data\n  //   setLoadedMeetups(DUMMY_MEETUPS);\n  // }, []);\n  // return <MeetupList meetups={loadedMeetups} />;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(MeetupList, {\n        meetups: props.meetups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n} //Static site generation -> here we have to run build to generate static page that will render, but the problem is when we add\n//new data that will not show(Disadvantage), we need to add {revalidate: sec} this will update the static page in given sec.\n\n\nexport async function getStaticProps() {\n  //fetch data from api\n  const client = await MongoClient.connect(\"mongodb+srv://mongo:Q5iWOMVURlIRMQ1t@cluster0.rog0svz.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find().toArray();\n  client.close(); //Checking\n\n  console.log(meetups);\n  return {\n    props: {\n      meetups: meetups.map(meetup => ({\n        id: meetup._id.toString(),\n        title: meetup.data.title,\n        image: meetup.data.image,\n        address: meetup.data.address\n      }))\n    },\n    revalidate: 1\n  };\n} //Server side generation -> here generate the page upon each request. Use it when if you want ot access on req and\n//response or data change frequently.\n// export async function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   //fetch api data;\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS\n//     },\n//   };\n// };\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/aniket/Desktop/REACT/Nextjs_project/nextjs-course/pages/index.jsx"],"names":["MongoClient","MeetupList","Head","Fragment","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","close","console","log","map","meetup","id","_id","toString","title","data","image","address","revalidate"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B,C,CACA;;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB;AAEA;AACA;AACA;AACA;AACA;AAEA,sBACE,QAAC,QAAD;AAAA,2BACA,QAAC,IAAD;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMR,WAAW,CAACS,OAAZ,CACnB,uGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AACAN,EAAAA,MAAM,CAACO,KAAP,GAVqC,CAYrC;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AAEA,SAAO;AACLD,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACY,GAAR,CAAaC,MAAD,KAAa;AAChCC,QAAAA,EAAE,EAAED,MAAM,CAACE,GAAP,CAAWC,QAAX,EAD4B;AAEhCC,QAAAA,KAAK,EAAEJ,MAAM,CAACK,IAAP,CAAYD,KAFa;AAGhCE,QAAAA,KAAK,EAAEN,MAAM,CAACK,IAAP,CAAYC,KAHa;AAIhCC,QAAAA,OAAO,EAAEP,MAAM,CAACK,IAAP,CAAYE;AAJW,OAAb,CAAZ;AADJ,KADF;AASLC,IAAAA,UAAU,EAAE;AATP,GAAP;AAWD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAevB,QAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\r\n// import { useEffect, useState } from \"react\";\r\nimport MeetupList from \"../components/meetups/MeetupList\";\r\nimport Head from \"next/head\";\r\nimport { Fragment } from \"react\";\r\n\r\n// const DUMMY_MEETUPS = [\r\n//   {\r\n//     id: \"m1\",\r\n//     title: \"A first meetup\",\r\n//     image: \"https://picsum.photos/seed/picsum/200/300\",\r\n//     address: \"Some address, kolkata\",\r\n//     description: \"This is first meetups\",\r\n//   },\r\n//   {\r\n//     id: \"m2\",\r\n//     title: \"A second meetup\",\r\n//     image: \"https://picsum.photos/id/870/200/300?grayscale&blur=2\",\r\n//     address: \"Some address, kolkata\",\r\n//     description: \"This is second meetups\",\r\n//   },\r\n//   {\r\n//     id: \"m3\",\r\n//     title: \"A third meetup\",\r\n//     image: \"https://picsum.photos/200/300/?blur\",\r\n//     address: \"Some address, Goa\",\r\n//     description: \"This is third meetups\",\r\n//   },\r\n// ];\r\n\r\n//Pre-rendering\r\n//1.static site generation\r\n//2.server side generation\r\n\r\nfunction HomePage(props) {\r\n  // const [loadedMeetups, setLoadedMeetups] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   //send http request and fetch the data\r\n  //   setLoadedMeetups(DUMMY_MEETUPS);\r\n  // }, []);\r\n  // return <MeetupList meetups={loadedMeetups} />;\r\n\r\n  return (\r\n    <Fragment>\r\n    <Head>\r\n      <MeetupList meetups={props.meetups} />\r\n    </Head>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\n//Static site generation -> here we have to run build to generate static page that will render, but the problem is when we add\r\n//new data that will not show(Disadvantage), we need to add {revalidate: sec} this will update the static page in given sec.\r\nexport async function getStaticProps() {\r\n  //fetch data from api\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://mongo:Q5iWOMVURlIRMQ1t@cluster0.rog0svz.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n\r\n  const meetups = await meetupsCollection.find().toArray();\r\n  client.close();\r\n\r\n  //Checking\r\n  console.log(meetups);\r\n\r\n  return {\r\n    props: {\r\n      meetups: meetups.map((meetup) => ({\r\n        id: meetup._id.toString(),\r\n        title: meetup.data.title,\r\n        image: meetup.data.image,\r\n        address: meetup.data.address,\r\n      })),\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\n//Server side generation -> here generate the page upon each request. Use it when if you want ot access on req and\r\n//response or data change frequently.\r\n// export async function getServerSideProps(context) {\r\n//   const req = context.req;\r\n//   const res = context.res;\r\n\r\n//   //fetch api data;\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}